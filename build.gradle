apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = 'gov.nasa.worldwind'
version = '2.2.0' + (project.hasProperty('snapshot') ? '-SNAPSHOT' : '')

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ant {
    property(file: 'release-build.properties')
}

ext {
    joglVersion = '2.4.0'
    gdalVersion = '1.7.2'
    jacksonVersion = '1.9.13'
    junitVersion = '4.5'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    implementation files('jackson-core-asl.jar', 'jogl-all.jar', 'gluegen-rt.jar', 'gdal.jar')
    testImplementation files("junit-${project.junitVersion}.jar")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    group = 'build'
    description = 'Assembles a jar archive containing the sources.'
    classifier = 'sources'
    from (sourceSets.main.allSource) {
        include '**/*.java'
        exclude 'config/**'
        exclude 'images/**'
    }
}

task extensionsJar(type: Jar) {
    group = 'build'
    description = 'Assembles a jar archive containing the extension classes.'
    baseName = 'worldwindx'
    from (sourceSets.main.output) {
        exclude 'com/**'
        exclude 'config/**'
        exclude 'images/**'
        exclude 'gov/nasa/worldwind/**'
    }
    doLast {
        copy {
            from "$buildDir/libs/$extensionsJar.archiveName"
            into project.projectDir
            rename "$extensionsJar.archiveName", "$extensionsJar.baseName.$extensionsJar.extension"
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group = 'build'
    description = 'Assembles a jar archive containing the javadocs.'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def pomConfig = {
    name 'WorldWindJava'
    url 'https://github.com/NASAWorldWind/WorldWindJava'
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            id 'emxsys'
            name 'Bruce Schubert'
            email 'bruce@emxsys.com'
        }
        developer {
            id 'pdavidc'
            name 'David Collins'
            email 'paul@paulcollinssoftware.com'
        }
        developer {
            id 'markpet49'
            name 'Mark Peterson'
            email 'markpet@yahoo.com'
        }
        developer {
            id 'tag3'
            name 'Tom Gaskins'
            email 'tom@tomgaskins.com'
        }
        developer {
            id 'zglueck'
            name 'Zach Glueckert'
            email 'zachrg@gmail.com'
        }
    }
    scm {
       url 'https://github.com/WorldWindEarth/WorldWindJava'
    }
}

publishing {
    publications {
        publishJar(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            
            groupId = project.group
            artifactId = project.name
            version = project.version
            
            pom.withXml {
                def root = asNode()
                def lastChild = root.children().last()
                lastChild.plus(pomConfig)
                
                def dependencies = root.appendNode('dependencies')
                
                def depNode = dependencies.appendNode('dependency')
                depNode.appendNode('groupId', 'org.jogamp.jogl')
                depNode.appendNode('artifactId', 'jogl-all-main')
                depNode.appendNode('version', "$joglVersion")
                
                depNode = dependencies.appendNode('dependency')
                depNode.appendNode('groupId', 'org.jogamp.gluegen')
                depNode.appendNode('artifactId', 'gluegen-rt-main')
                depNode.appendNode('version', "$joglVersion")
                
                depNode = dependencies.appendNode('dependency')
                depNode.appendNode('groupId', 'org.gdal')
                depNode.appendNode('artifactId', 'gdal')
                depNode.appendNode('version', "$gdalVersion")
                
                depNode = dependencies.appendNode('dependency')
                depNode.appendNode('groupId', 'org.codehaus.jackson')
                depNode.appendNode('artifactId', 'jackson-core-asl')
                depNode.appendNode('version', "$jacksonVersion")
            }
        }
        publishExtensionsJar(MavenPublication) {
            artifact extensionsJar
            
            groupId = project.group
            artifactId = 'worldwindx'
            version = project.version
            
            pom.withXml {
                def root = asNode()
                def lastChild = root.children().last()
                lastChild.plus(pomConfig);
                
                def dependencies = root.appendNode('dependencies')
                
                def depNode = dependencies.appendNode('dependency')
                depNode.appendNode('groupId', 'gov.nasa.worldwind')
                depNode.appendNode('artifactId', 'worldwind')
                depNode.appendNode('version', "$project.version")
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
            include '**/*.java'
        }
        resources {
            srcDirs = ['src']
            exclude '**/*.java'
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
    }
}

compileJava {
    options.debug = !project.hasProperty('release')
}

test {
    dependsOn jar
    classpath += project.files("$buildDir/libs/$jar.archiveName", configurations.runtime)
}

jar {
    dependsOn classes
    from sourceSets.main.output
    exclude 'gov/nasa/worldwindx/**'
    doLast {
        copy {
            from "$buildDir/libs/$jar.archiveName"
            into project.projectDir
            rename "$jar.archiveName", "$jar.baseName.$jar.extension"
        }
    }
}

javadoc {
    options {
        overview = "$project.projectDir/src/overview.html"
        windowTitle = 'NASA WorldWind'
        title = 'NASA WorldWind'
        header = 'NASA WorldWind'
        splitIndex = true
        noDeprecated = true
        version = false
        author = false
        use = true
    }
    exclude 'com/**'
    exclude 'gov/nasa/worldwind/formats/**'
}

artifacts {
    archives sourcesJar
    archives extensionsJar
    archives javadocJar
}

task processMilStd2525SVGs(dependsOn: jar) {
    group = 'build'
    description = 'Processes the MIL-STD-2525 SVG source files.'
    
    // Set outputs of this task to be PNG directory.
    def milStd2525PngDir = file(ant.properties['milstd2525.png.dir'])
    outputs.dir(milStd2525PngDir)

    doLast {
        def milStd2525SrcDir = file(ant.properties['milstd2525.src.dir'])
        
        // If PNG directory doesn't exist, create it.
        if (!milStd2525PngDir.exists()) {
            milStd2525PngDir.mkdirs()
        }
        
        def width = ant.properties['milstd2525.png.width']
        def height = ant.properties['milstd2525.png.height']
        
        // Rasterize the MIL-STD-2525 SVG sources. Exclude empty directories in order
        // to suppress erroneous error messages from the Apache Batik Rasterizer.
        milStd2525SrcDir.traverse([type: groovy.io.FileType.DIRECTORIES, excludeNameFilter: ~/fills|frames|icons/]) { srcDir ->
            def dstDir = milStd2525PngDir.path + (srcDir.path - milStd2525SrcDir.path)
            exec {
                commandLine 'java',\
                    '-jar',\
                    "$project.projectDir/lib-external/batik/batik-rasterizer.jar",\
                    '-m',\
                    'image/png',\
                    '-maxw',\
                    width,\
                    '-h',\
                    height,\
                    '-d',\
                    dstDir,\
                    srcDir
            }
        }
        
        // The Forward Edge of Battle (FEBA, 2.X.2.4.2.1) image has a custom height of 16 pixels.
        milStd2525SrcDir.traverse([type: groovy.io.FileType.FILES, nameFilter: ~/g-g.dlf--------\.svg/]) { srcFile ->
            def dstFile = ((milStd2525PngDir.path + (srcFile.path - milStd2525SrcDir.path)) - '.svg') + '.png'
            exec {
                commandLine 'java',\
                    '-jar',\
                    "$project.projectDir/lib-external/batik/batik-rasterizer.jar",\
                    '-m',\
                    'image/png',\
                    '-maxw',\
                    width,\
                    '-h',\
                    '16',\
                    '-d',\
                    dstFile,\
                    srcFile
            }
        }
        
        // Trim the MIL-STD-2525 modifier images to remove transparent borders.
        def modifiersDir = file("$milStd2525PngDir.path/modifiers")
        modifiersDir.traverse([type: groovy.io.FileType.FILES]) { srcFile ->
            exec {
                commandLine 'java',\
                    '-cp',\
                    "$buildDir/libs/$jar.archiveName",\
                    'gov.nasa.worldwind.util.ImageTrimmer',\
                    srcFile
            }
        }
    }
}

task milStd2525Zip(type: Zip, dependsOn: processMilStd2525SVGs) {
    group = 'build'
    description = 'Assembles the MIL-STD-2525 symbology package.'
    def milStd2525OutDir = file(ant.properties['milstd2525.out.dir'])
    def milStd2525PngDir = file(ant.properties['milstd2525.png.dir'])
    from milStd2525PngDir
    include '**/*'
    archiveName 'milstd2525-symbols.zip'
    destinationDir milStd2525OutDir
}

task runLayerManager(type: JavaExec, dependsOn: classes) {
    group = 'run'
    description = 'Runs the LayerManager example app.'
    classpath sourceSets.main.runtimeClasspath
    main = 'gov.nasa.worldwindx.examples.layermanager.LayerManagerApp'
    System.setProperty('java.util.logging.config.file', "$project.projectDir/logging.properties")
}
